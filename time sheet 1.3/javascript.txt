// script.js

var gk_isXlsx = false;
var gk_xlsxFileLookup = {};
var gk_fileData = {};
function filledCell(cell) {
  return cell !== '' && cell != null;
}
function loadFileData(filename) {
  if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
    try {
      var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
      var firstSheetName = workbook.SheetNames[0];
      var worksheet = workbook.Sheets[firstSheetName];
      var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
      var filteredData = jsonData.filter(row => row.some(filledCell));
      var headerRowIndex = filteredData.findIndex((row, index) =>
        row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
      );
      if (headerRowIndex === -1 || headerRowIndex > 25) {
        headerRowIndex = 0;
      }
      var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex));
      csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
      return csv;
    } catch (e) {
      console.error(e);
      return "";
    }
  }
  return gk_fileData[filename] || "";
}

const STORAGE_KEY = 'enzo_timesheet_users';
let users = JSON.parse(localStorage.getItem(STORAGE_KEY)) || {};
let currentUser = null;
let historyData = [];
let isDarkMode = false;

cleanupUsers();

function cleanupUsers() {
  const now = Date.now();
  const sixMonthsMs = 180 * 24 * 60 * 60 * 1000;
  Object.keys(users).forEach(username => {
    if (now - users[username].lastLogin > sixMonthsMs) {
      delete users[username];
    }
  });
  saveUsers();
}

function saveUsers() {
  localStorage.setItem(STORAGE_KEY, JSON.stringify(users));
}

function register() {
  const username = document.getElementById('username').value.trim();
  const password = document.getElementById('password').value;
  if (!username || password.length < 6) {
    setMessage('Username required, password must be at least 6 characters.');
    return;
  }
  if (users[username]) {
    setMessage('Username already taken.');
    return;
  }
  users[username] = {
    password: password,
    lastLogin: Date.now(),
    data: {
      settings: { employeeName: username, hourlyRate: 3, bonus: 0, includeBreaks: false },
      rows: [],
      history: []
    }
  };
  saveUsers();
  login();
}

function login() {
  const username = document.getElementById('username').value.trim();
  const password = document.getElementById('password').value;
  if (!users[username] || users[username].password !== password) {
    setMessage('Invalid username or password.');
    return;
  }
  currentUser = username;
  users[username].lastLogin = Date.now();
  saveUsers();
  loadUserData();
  document.getElementById('loginModal').style.display = 'none';
  document.getElementById('appContainer').style.display = 'block';
  setMessage('');
}

function setMessage(msg) {
  document.getElementById('message').innerText = msg;
}

function loadUserData() {
  if (!currentUser) return;
  const data = users[currentUser].data;
  document.getElementById('employeeName').value = data.settings.employeeName;
  document.getElementById('hourlyRate').value = data.settings.hourlyRate;
  document.getElementById('bonus').value = data.settings.bonus;
  document.getElementById('includeBreaks').checked = data.settings.includeBreaks;
  historyData = data.history;
  displayHistory();
  const tbody = document.querySelector('#timeSheet tbody');
  tbody.innerHTML = '';
  data.rows.forEach(rowData => {
    addDay(rowData.date, rowData.workHours, rowData.breakHours, rowData.dayOff);
  });
  updateTotals();
}

function saveUserData() {
  if (!currentUser) return;
  const data = users[currentUser].data;
  data.settings = {
    employeeName: document.getElementById('employeeName').value,
    hourlyRate: parseFloat(document.getElementById('hourlyRate').value) || 0,
    bonus: parseFloat(document.getElementById('bonus').value) || 0,
    includeBreaks: document.getElementById('includeBreaks').checked
  };
  data.rows = [];
  document.querySelectorAll('#timeSheet tbody tr').forEach(row => {
    data.rows.push({
      date: row.cells[0].querySelector('input').value,
      dayOff: row.cells[1].querySelector('input').checked,
      workHours: parseFloat(row.cells[2].querySelector('input').value) || 0,
      breakHours: parseFloat(row.cells[3].querySelector('input').value) || 0
    });
  });
  data.history = historyData;
  saveUsers();
}

function logout() {
  saveUserData();
  currentUser = null;
  document.getElementById('loginModal').style.display = 'flex';
  document.getElementById('appContainer').style.display = 'none';
  const tbody = document.querySelector('#timeSheet tbody');
  tbody.innerHTML = '';
  historyData = [];
  displayHistory();
  document.getElementById('employeeName').value = '';
  document.getElementById('hourlyRate').value = 3;
  document.getElementById('bonus').value = 0;
  document.getElementById('includeBreaks').checked = false;
  updateTotals();
}

function toggleTheme() {
  isDarkMode = !isDarkMode;
  const body = document.body;
  const toggleBtn = document.querySelector('.theme-toggle');
  if (isDarkMode) {
    body.classList.add('dark-mode');
    toggleBtn.innerHTML = '‚òÄÔ∏è Light Mode';
  } else {
    body.classList.remove('dark-mode');
    toggleBtn.innerHTML = 'üåô Dark Mode';
  }
}

function addDay(dateStr = "", workHours = 0, breakHours = 0, isDayOff = false) {
  const tbody = document.querySelector("#timeSheet tbody");
  const row = document.createElement("tr");
  const today = dateStr || new Date().toISOString().split("T")[0];
  
  row.innerHTML = `
    <td><input type="date" value="${today}"></td>
    <td><input type="checkbox" class="day-off" ${isDayOff ? 'checked' : ''}></td>
    <td><input type="number" step="0.01" value="${workHours.toFixed(2)}" min="0" placeholder="0.00" ${isDayOff ? 'disabled' : ''}></td>
    <td><input type="number" step="0.01" value="${breakHours.toFixed(2)}" min="0" placeholder="0.00" ${isDayOff ? 'disabled' : ''}></td>
    <td class="totalHours">0.00</td>
    <td class="amount">$0.00</td>
    <td><button class="delete-btn" onclick="deleteRow(this)">üóëÔ∏è</button></td>
  `;
  
  tbody.appendChild(row);
  updateTotals();
  
  row.querySelectorAll("input").forEach(input => {
    if (input.type === "checkbox") {
      input.addEventListener("change", function() {
        const workInput = row.cells[2].querySelector("input");
        const breakInput = row.cells[3].querySelector("input");
        workInput.disabled = this.checked;
        breakInput.disabled = this.checked;
        if (this.checked) {
          workInput.value = "0.00";
          breakInput.value = "0.00";
        }
        updateTotals();
      });
    } else {
      input.addEventListener("input", updateTotals);
      input.addEventListener("focus", function() {
        this.select();
      });
    }
  });

  row.style.opacity = '0';
  row.style.transform = 'translateY(-20px)';
  setTimeout(() => {
    row.style.transition = 'all 0.3s ease';
    row.style.opacity = '1';
    row.style.transform = 'translateY(0)';
  }, 100);

  showToast('Day added successfully!');
}

function addWeek() {
  let today = new Date();
  for (let i = 0; i < 7; i++) {
    let d = new Date(today);
    d.setDate(today.getDate() + i);
    setTimeout(() => {
      addDay(d.toISOString().split("T")[0]);
    }, i * 100);
  }
  showToast('Week added successfully!');
}

function deleteRow(btn) {
  const row = btn.closest('tr');
  row.style.transition = 'all 0.3s ease';
  row.style.opacity = '0';
  row.style.transform = 'translateX(-100px)';
  setTimeout(() => {
    row.remove();
    updateTotals();
  }, 300);
  showToast('Row deleted successfully!');
}

function updateTotals() {
  let rate = parseFloat(document.getElementById("hourlyRate").value) || 0;
  let bonus = parseFloat(document.getElementById("bonus").value) || 0;
  let includeBreaks = document.getElementById("includeBreaks").checked;
  let totalWorkingHours = 0;
  let totalBreakHours = 0;
  let totalHours = 0;
  let basePay = 0;

  document.querySelectorAll("#timeSheet tbody tr").forEach(row => {
    let isDayOff = row.cells[1].querySelector("input").checked;
    let work = isDayOff ? 0 : parseFloat(row.cells[2].querySelector("input").value) || 0;
    let brk = isDayOff ? 0 : parseFloat(row.cells[3].querySelector("input").value) || 0;
    let hours = work + brk;
    let amount = includeBreaks ? (work + brk) * rate : work * rate;
    
    row.querySelector(".totalHours").innerText = hours.toFixed(2);
    row.querySelector(".amount").innerText = `$${amount.toFixed(2)}`;
    
    totalWorkingHours += work;
    totalBreakHours += brk;
    totalHours += hours;
    basePay += amount;
  });

  document.getElementById("totalWorkingHours").innerText = totalWorkingHours.toFixed(2);
  document.getElementById("totalBreakHours").innerText = totalBreakHours.toFixed(2);
  document.getElementById("totalHours").innerText = totalHours.toFixed(2);
  document.getElementById("basePay").innerText = `$${basePay.toFixed(2)}`;
  document.getElementById("totalValue").innerText = (basePay + bonus).toFixed(2);
  saveUserData();
}

function saveHistory() {
  const employeeName = document.getElementById("employeeName").value || "Unknown";
  const date = new Date().toLocaleString();
  const total = document.getElementById("totalValue").innerText;
  const workingHours = document.getElementById("totalWorkingHours").innerText;
  
  const historyItem = {
    id: Date.now(),
    employee: employeeName,
    date,
    total: `$${total}`,
    hours: workingHours
  };
  
  historyData.push(historyItem);
  displayHistory();
  saveUserData();
  showToast('History saved successfully!');
}

function displayHistory() {
  const historyContainer = document.getElementById("history");
  historyContainer.innerHTML = '';
  
  if (historyData.length === 0) {
    historyContainer.innerHTML = '<p style="text-align: center; color: #666;">No history items saved yet.</p>';
    return;
  }
  
  const displayData = [...historyData].reverse();
  displayData.forEach(item => {
    const div = document.createElement("div");
    div.className = "history-item";
    div.innerHTML = `
      <div>
        <strong>${item.employee}</strong><br>
        <small>${item.date}</small><br>
        <span>Hours: ${item.hours}</span>
      </div>
      <div>
        <strong style="font-size: 1.2em;">${item.total}</strong><br>
        <button class="delete-btn" onclick="deleteHistory(${item.id})" style="font-size: 0.7em; padding: 4px 8px;">Delete</button>
      </div>
    `;
    historyContainer.appendChild(div);
  });
}

function deleteHistory(id) {
  historyData = historyData.filter(item => item.id !== id);
  displayHistory();
  saveUserData();
  showToast('History item deleted!');
}

function clearAll() {
  if (confirm('Are you sure you want to clear all entries? This cannot be undone.')) {
    const tbody = document.querySelector("#timeSheet tbody");
    const rows = tbody.querySelectorAll('tr');
    
    rows.forEach((row, index) => {
      setTimeout(() => {
        row.style.transition = 'all 0.3s ease';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-100px)';
        setTimeout(() => {
          if (row.parentNode) {
            row.remove();
          }
          if (index === rows.length - 1) {
            updateTotals();
          }
        }, 300);
      }, index * 100);
    });
    
    showToast('All entries cleared!');
  }
}

function downloadPDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  const employeeName = document.getElementById("employeeName").value || "Unknown";
  
  doc.setFontSize(20);
  doc.text("Enzo Dialer Time Sheet", 20, 20);
  doc.setFontSize(14);
  doc.text(`Employee: ${employeeName}`, 20, 35);
  doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 45);
  
  let y = 65;
  doc.setFontSize(12);
  doc.text("Date", 20, y);
  doc.text("Day Off", 60, y);
  doc.text("Work Hrs", 90, y);
  doc.text("Break Hrs", 120, y);
  doc.text("Total Hrs", 150, y);
  doc.text("Amount", 180, y);
  y += 10;
  
  document.querySelectorAll("#timeSheet tbody tr").forEach(row => {
    let date = row.cells[0].querySelector("input").value || 'N/A';
    let isDayOff = row.cells[1].querySelector("input").checked ? 'Yes' : 'No';
    let work = row.cells[2].querySelector("input").value || '0';
    let brk = row.cells[3].querySelector("input").value || '0';
    let total = row.querySelector(".totalHours").innerText;
    let amount = row.querySelector(".amount").innerText;
    
    doc.text(date, 20, y);
    doc.text(isDayOff, 60, y);
    doc.text(work, 90, y);
    doc.text(brk, 120, y);
    doc.text(total, 150, y);
    doc.text(amount, 180, y);
    y += 10;
  });
  
  y += 10;
  doc.setFontSize(16);
  doc.text(`Grand Total: $${document.getElementById("totalValue").innerText}`, 20, y);
  
  doc.save(`${employeeName}_timesheet_${new Date().toISOString().split('T')[0]}.pdf`);
  showToast('PDF downloaded successfully!');
}

function downloadCSV() {
  const employeeName = document.getElementById("employeeName").value || "Unknown";
  let csvContent = "data:text/csv;charset=utf-8,";
  
  csvContent += "Employee,Date,Day Off,Working Hours,Break Hours,Total Hours,Amount\n";
  
  document.querySelectorAll("#timeSheet tbody tr").forEach(row => {
    let date = row.cells[0].querySelector("input").value || '';
    let isDayOff = row.cells[1].querySelector("input").checked ? 'Yes' : 'No';
    let work = row.cells[2].querySelector("input").value || '0';
    let brk = row.cells[3].querySelector("input").value || '0';
    let total = row.querySelector(".totalHours").innerText;
    let amt = row.querySelector(".amount").innerText.replace('$', '');
    
    csvContent += `"${employeeName}","${date}","${isDayOff}","${work}","${brk}","${total}","${amt}"\n`;
  });
  
  csvContent += `"","","","","","Grand Total:","${document.getElementById("totalValue").innerText}"\n`;
  
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", `${employeeName}_timesheet_${new Date().toISOString().split('T')[0]}.csv`);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  showToast('CSV downloaded successfully!');
}

function downloadXLSX() {
  const employeeName = document.getElementById("employeeName").value || "Unknown";
  let wb = XLSX.utils.book_new();
  let ws_data = [["Employee", "Date", "Day Off", "Working Hours", "Break Hours", "Total Hours", "Amount"]];
  
  document.querySelectorAll("#timeSheet tbody tr").forEach(row => {
    let date = row.cells[0].querySelector("input").value || '';
    let isDayOff = row.cells[1].querySelector("input").checked ? 'Yes' : 'No';
    let work = row.cells[2].querySelector("input").value || '0';
    let brk = row.cells[3].querySelector("input").value || '0';
    let total = row.querySelector(".totalHours").innerText;
    let amt = row.querySelector(".amount").innerText.replace('$', '');
    ws_data.push([employeeName, date, isDayOff, work, brk, total, amt]);
  });
  
  ws_data.push(['', '', '', '', '', 'Grand Total:', document.getElementById("totalValue").innerText]);
  
  let ws = XLSX.utils.aoa_to_sheet(ws_data);
  XLSX.utils.book_append_sheet(wb, ws, "Timesheet");
  XLSX.writeFile(wb, `${employeeName}_timesheet_${new Date().toISOString().split('T')[0]}.xlsx`);
  showToast('XLSX downloaded successfully!');
}

function emailData() {
  const employeeName = document.getElementById("employeeName").value || "Unknown";
  const total = document.getElementById("totalValue").innerText;
  let body = `Enzo Dialer Time Sheet for ${employeeName}%0A%0AGrand Total: $${total}%0A%0A`;
  body += "Date | Day Off | Working Hours | Break Hours | Total Hours | Amount%0A";
  document.querySelectorAll("#timeSheet tbody tr").forEach(row => {
    let date = row.cells[0].querySelector("input").value || '';
    let isDayOff = row.cells[1].querySelector("input").checked ? 'Yes' : 'No';
    let work = row.cells[2].querySelector("input").value || '0';
    let brk = row.cells[3].querySelector("input").value || '0';
    let total = row.querySelector(".totalHours").innerText;
    let amt = row.querySelector(".amount").innerText;
    body += `${date} | ${isDayOff} | ${work} | ${brk} | ${total} | ${amt}%0A`;
  });
  const subject = `${employeeName} Timesheet ${new Date().toISOString().split('T')[0]}`;
  window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${body}`;
  showToast('Email client opened!');
}

function showToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  document.body.appendChild(toast);
  
  setTimeout(() => toast.classList.add('show'), 100);
  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => {
      if (document.body.contains(toast)) {
        document.body.removeChild(toast);
      }
    }, 300);
  }, 3000);
}

document.getElementById("hourlyRate").addEventListener("input", updateTotals);
document.getElementById("bonus").addEventListener("input", updateTotals);

document.addEventListener('DOMContentLoaded', function() {
  displayHistory();
});

document.addEventListener('keydown', function(e) {
  if (e.ctrlKey) {
    switch(e.key) {
      case 'd':
        e.preventDefault();
        addDay();
        break;
      case 's':
        e.preventDefault();
        saveHistory();
        break;
    }
  }
});